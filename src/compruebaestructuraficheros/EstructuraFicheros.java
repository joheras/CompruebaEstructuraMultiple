/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compruebaestructuraficheros;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import static java.nio.file.LinkOption.NOFOLLOW_LINKS;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author joheras
 */
public class EstructuraFicheros extends javax.swing.JFrame {

    /**
     * Creates new form EstructuraFicherosP01P06
     */
    private String practica;

    public EstructuraFicheros() {

        File maindir = new File(System.getProperty("user.dir"));

        ArrayList<String> practicas = new ArrayList<>();

        for (File f : maindir.listFiles()) {
            if (f.getName().contains(".txt") && (!f.getName().contains("optional"))) {
                practicas.add(f.getName().substring(0, f.getName().indexOf(".")));

            }
        }

        if (practicas.size() > 0) {
            String selection = (String) JOptionPane.showInputDialog(null, "Selecciona entrega a comprobar", "", JOptionPane.DEFAULT_OPTION, null, practicas.toArray(), practicas.get(0));

            if (selection != null) {
                practica = selection + ".txt";
                initComponents();
            } else {
                System.exit(0);
            }

        } else {
            JOptionPane.showMessageDialog(null,
                    "Debes descargar el fichero con la estructura de prácticas\n"
                    + "e incluirlo en la misma carpeta que este ejecutable.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(0);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButtonSelectDirectory = new javax.swing.JButton();
        jButtonCheckStructure = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Estructura Ficheros"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Información"));
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setEnabled(false);

        jButtonSelectDirectory.setText("Selecciona Directorio");
        jButtonSelectDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDirectoryActionPerformed(evt);
            }
        });

        jButtonCheckStructure.setText("Comprueba estructura");
        jButtonCheckStructure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckStructureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCheckStructure, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSelectDirectory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelectDirectory)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCheckStructure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDirectoryActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(".")); // start at application current directory
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File yourFolder = fc.getSelectedFile();
            jTextField1.setText(yourFolder.getAbsolutePath());
        }


    }//GEN-LAST:event_jButtonSelectDirectoryActionPerformed

    private static ArrayList<String> readListofFilesFromFile(String path) throws FileNotFoundException, IOException {

        ArrayList<String> result = new ArrayList<>();
        if ((new File(path)).exists()) {

            FileReader in = new FileReader(path);
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                result.add(line);
            }
        }
        return result;
    }


    private void jButtonCheckStructureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckStructureActionPerformed
        String path = jTextField1.getText();
        if (path.equals("")) {
            JOptionPane.showMessageDialog(this, "Selecciona un directorio primero", "Error", JOptionPane.ERROR_MESSAGE);

        } else {
            try {
                String errores = "";
                File folder = new File(path);
                ArrayList<String> ficheros = readListofFilesFromFile(System.getProperty("user.dir") + "/" + practica);

                ArrayList<String> ficherosOpcionales = readListofFilesFromFile(System.getProperty("user.dir") + "/optional_" + practica);

                File f;
                for (int i = 0; i < ficheros.size(); i++) {
                    try {
                        f = new File(path + ficheros.get(i));
                        Path path1 = Paths.get(path + ficheros.get(i));

                        if (f.exists()) {
                            if (!f.getCanonicalFile().toPath().toRealPath(NOFOLLOW_LINKS).toString().equals(f.toString())) {
                                if ((path + ficheros.get(i)).contains(".")) {
                                    errores = errores + "Falta el fichero " + ficheros.get(i) + "\n";
                                } else {
                                    errores = errores + "Falta la carpeta " + ficheros.get(i) + "\n";
                                }
                            }

                        }
                        if (!f.exists()) {
                            if ((path + ficheros.get(i)).contains(".")) {
                                errores = errores + "Falta el fichero " + ficheros.get(i) + "\n";
                            } else {
                                errores = errores + "Falta la carpeta " + ficheros.get(i) + "\n";
                            }
                        }
                    } catch (IOException ex) {
                        if ((path + ficheros.get(i)).contains(".")) {
                            errores = errores + "Falta el fichero " + ficheros.get(i) + "\n";
                        } else {
                            errores = errores + "Falta la carpeta " + ficheros.get(i) + "\n";
                        }
                    }
                }

                if (errores.equals("")) {
                    ArrayList<File> files = new ArrayList<>();
                    for (int i = 0; i < ficheros.size(); i++) {
                        files.add(new File(path + ficheros.get(i)));
                    }

                    for (int i = 0; i < ficherosOpcionales.size(); i++) {
                        File optionalFile = new File(path + ficherosOpcionales.get(i));
                        if (optionalFile.exists()) {
                            files.add(optionalFile);
                        }
                    }

                    writeZipFile(new File(path), files);
                    jTextArea1.setText("La estructura de ficheros es correcta.\n"
                            + "Se ha creado un fichero zip con dichos ficheros.\n");
                } else {
                    jTextArea1.setText(errores);
                }
            } catch (IOException ex) {
                Logger.getLogger(EstructuraFicheros.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_jButtonCheckStructureActionPerformed

    private void listFilesForFolder(final File folder) {
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                listFilesForFolder(fileEntry);
            } else {
                System.out.println(fileEntry.getName());
            }
        }
    }

    public static void writeZipFile(File directoryToZip, ArrayList<File> fileList) {

        try {

            String path = directoryToZip.getAbsolutePath();
            path = path.substring(0, path.lastIndexOf("/") + 1);
            FileOutputStream fos = new FileOutputStream(path + directoryToZip.getName() + ".zip");
            ZipOutputStream zos = new ZipOutputStream(fos);

            for (File file : fileList) {
                if (!file.isDirectory()) {
                    addToZip(directoryToZip, file, zos);
                }
            }

            zos.close();
            fos.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void addToZip(File directoryToZip, File file, ZipOutputStream zos) throws FileNotFoundException,
            IOException {

        FileInputStream fis = new FileInputStream(file);

        // we want the zipEntry's path to be a relative path that is relative
        // to the directory being zipped, so chop off the rest of the path
        String zipFilePath = file.getCanonicalPath().substring(directoryToZip.getCanonicalPath().length() + 1,
                file.getCanonicalPath().length());
        System.out.println("Writing '" + zipFilePath + "' to zip file");
        ZipEntry zipEntry = new ZipEntry(zipFilePath);
        zos.putNextEntry(zipEntry);

        byte[] bytes = new byte[1024];
        int length;
        while ((length = fis.read(bytes)) >= 0) {
            zos.write(bytes, 0, length);
        }

        zos.closeEntry();
        fis.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicheros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicheros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicheros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EstructuraFicheros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EstructuraFicheros Estructura = new EstructuraFicheros();
                Estructura.setVisible(true);
                Estructura.setExtendedState(Estructura.getExtendedState() | JFrame.MAXIMIZED_BOTH);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckStructure;
    private javax.swing.JButton jButtonSelectDirectory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
